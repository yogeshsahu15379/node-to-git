#!/usr/bin/env bash
## Run all the linting tools for the project
##
## Usage: fin validate [options] [types]
## Options:
##   --staged : only content staged for git will be scanned
## Types:
##   php : php validation
##   theme : theme validation
##   design : design validation
##   checkModules : run drupal-check against modules
##   checkTheme : run drupal-check against theme
##   (none specified) : all the above
##
## This runs within the Build/CLI container but before site is built.
## All tools are available, but there isn't any Drupal site or database.
#: exec_target = cli

source "$(dirname $0)/.helper"
set -e

# Set defaults
staged=0
validatePhp=0
validateTheme=0
validateDesign=0
checkModules=0
checkTheme=0
# --------------------------- Parse option arguments ---------------------------------
while [[ "$1" == "-"* ]]; do
  case $1 in
    --staged)
      staged=1
      shift
      ;;

    *)
      printf "$(WARN_SLUG) $1 is an unsupported argument."
      exit
      ;;

  esac
done

# Adjust theme path to point to actual drupal app if it exists.
drupalTheme="$THEME_PATH"
if [[ -e "${THEME_PATH}/apps/drupal" ]]; then
  drupalTheme="${THEME_PATH}/apps/drupal"
fi

# --------------------------- Parse type arguments ---------------------------------
if [ -z "$1" ]; then
  # No type arguments given, default to all
  validatePhp=1
  validateTheme=0
  validateDesign=0
  checkModules=1
  checkTheme=1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    php) # PHP validation
      validatePhp=1
      shift
      ;;

    theme) # Theme validation
      validateTheme=0
      shift
      ;;

    design) # PL validation
      validateDesign=0
      shift
      ;;

    checkModules) # drupal-check modules
      checkModules=1
      shift
      ;;

    checkTheme) # drupal-check theme
      checkTheme=1
      shift
      ;;
  esac
done

# --------------------------- Validate php parts ---------------------------------
validate_php() {
  if [[ $staged -eq 1 ]]; then
    # Set paths to only validate staged php code.
    phpcsPaths=$(git diff --name-only --cached --diff-filter=ACM)
    phpLint=$phpcsPaths
    if [[ ! ${phpcsPaths} ]]; then
      # Exit early if staged and no files are present.
      echo "No staged file changes to validate."
      return
    fi
  else
    # Set php linting/cs path defaults.
    phpLint=project
    phpcsPaths="project/profiles project/modules project/tests"
    if [ -e ${drupalTheme} ]; then
      phpcsPaths="${phpcsPaths} ${drupalTheme}"
    fi
  fi

  # Ensure composer.json is in sync with composer.lock.
  if [[ $staged -eq 0 || ${phpcsPaths} == *"composer"* ]]; then
    printf "$(INFO_SLUG) Checking for valid composer.json...\n"
    echo_exec composer validate
  fi

  printf "$(INFO_SLUG) Checking PHP syntax...\n"
  echo_exec vendor/bin/parallel-lint \
    --exclude project/themes/*/vendor \
    --exclude project/themes/*/*/*/pattern-lab \
    --exclude project/design/particle/node_modules \
    $phpLint

  printf "\n$(INFO_SLUG) Checking PHP Code style...\n"
  echo_exec vendor/bin/phpcs --standard="project/tests/.phpcs.xml" \
    --colors \
    --report-full -p \
    --extensions="php,module,inc,install,test,profile,theme" \
    --ignore="*.features.*,*.pages*.inc" \
    ${phpcsPaths}

}

# --------------------------- Validate theme parts ---------------------------------
validate_theme() {
  # Twig linting.
  printf "$(INFO_SLUG) Checking Drupal Twig style...\n"
  echo_exec composer twig-lint lint ${drupalTheme}
}

# --------------------------- Validate design parts ---------------------------------
validate_design() {
  if [[ "$DESIGN_SYSTEM" == "pl" ]]; then
    printf "$(INFO_SLUG) Checking Design Twig style...\n"
    echo_exec composer twig-lint lint ${DESIGN_PATH}/source
  fi

  # Front-end design linting.
  cd ${DESIGN_PATH}

  printf "$(INFO_SLUG) Checking design linting and style...\n"
  echo_exec npm run lint
}

# --------------------------- Drupal Check ---------------------------------
drupal_check_modules() {
  # Drupal-check custom modules.
  checkPath="project/modules"
  checkOptions="-d"
  printf "\n$(INFO_SLUG) Running drupal-check on ${checkPath}...\n"
  echo_exec ./bin/drupal-check "${checkOptions} ${checkPath}"
}

drupal_check_theme() {
  # Drupal-check custom particle theme.
  checkPath="${drupalTheme}"
  checkOptions="-d"
  printf "\n$(INFO_SLUG) Running drupal-check on ${drupalTheme}...\n"
  echo_exec ./bin/drupal-check "${checkOptions} ${checkPath}"
}

############################# Main processing #################################

cd ${PROJECT_ROOT}

# Ensure xdebug is disabled for speed.
xdebug off

# Perform PHP validation
if [[ $validatePhp -eq 1 ]]; then
  validate_php
fi

# Perform drupal-check validation for modules.
if [[ $checkModules -eq 1 ]]; then
  drupal_check_modules
fi

# Particle hard-codes full validation for the lint command, so this is skipped if only checking staged content.
if [[ $staged -eq 0 && -e ${drupalTheme} ]]; then
  if [[ $validateTheme -eq 1 ]]; then
    # Commenting out for drupal9 until twig-lint is compatible.
    echo "Drupal9 twig-lint bypass"
    # validate_theme
  fi
  # Perform drupal-check validation for theme.
  if [[ $checkTheme -eq 1 ]]; then
    drupal_check_theme
  fi
fi

# Particle hard-codes full validation for the lint command, so this is skipped if only checking staged content.
if [[ $staged -eq 0 && -e ${DESIGN_PATH} ]]; then
  if [[ $validateDesign -eq 1 ]]; then
    # Commenting out for drupal9 until twig-lint is compatible.
    echo "Drupal9 twig-lint bypass"
    # validate_design
  fi
fi

# Restore previous xdebug state.
xdebug ${XDEBUG_STATUS}
