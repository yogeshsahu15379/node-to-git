/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color, LinkTarget, NeutralColor, SignaturePrimaryColor, Size, SpacingTokens, TextInput, VerticalAlignment } from "./utils/types";
import { ButtonVariant } from "./components/aes-button/aes-button";
import { CTAProps } from "./components/aes-canvas/aes-canvas";
import { colSpanRange } from "./components/aes-column/aes-column";
import { CTALink } from "./components/aes-cta/aes-cta";
import { IconType, LogoType, LogoVariants, Markets } from "./utils/enums";
import { AllowedHeadingLevels } from "./components/aes-heading/aes-heading";
import { CTAProps as CTAProps1 } from "./components/aes-hero-slide/aes-hero-slide";
import { AccordionType } from "./components/aes-menu-accordion/aes-menu-accordion";
import { InputOptions } from "./components/aes-text-input/aes-text-input";
export namespace Components {
    interface AesAccordion {
        /**
          * Whether to display the accordion in open or close state
         */
        "isOpen": boolean;
    }
    interface AesBackToTopButton {
    }
    interface AesBg {
        /**
          * The neutral color to apply to the background
         */
        "color": NeutralColor;
        /**
          * The position of the image.
         */
        "imagePosition": 'top-right' | 'bottom';
        /**
          * The image to apply to the background
         */
        "imageUrl": string;
    }
    interface AesButton {
        /**
          * Whether the button is disabled. Only applies to implementations not using the url prop
         */
        "disabled": boolean;
        /**
          * Whether to display a right arrow after the slot
         */
        "shouldDisplayArrow": boolean;
        /**
          * The target to use for a link, used in conjunction with the url attribute.
         */
        "target": LinkTarget;
        /**
          * The url to use for a link. This will render an anchor element. Do not set this prop if you want to render a button element.
         */
        "url": string;
        /**
          * The button style variant to use.
         */
        "variant": ButtonVariant;
    }
    interface AesCanvas {
        /**
          * Whether to allow autoplay
         */
        "autoplay": boolean;
        /**
          * Which brand color should be used as the background of this section?
         */
        "bgColor": NeutralColor;
        /**
          * The image to apply to the background on hover
         */
        "bgHoverImage": string;
        /**
          * The vimeo video to show
         */
        "bgVimeoVideo": string;
        /**
          * Which brand color should be used as the border of this section?
         */
        "borderColor": Color;
        /**
          * Whether to show controls on video
         */
        "controls": boolean;
        /**
          * Options for rendering a CTA Link button at the bottom
         */
        "cta": CTAProps | string;
        /**
          * Whether to display a border around the component
         */
        "displayBorder": boolean;
        /**
          * Whether to display a drop shadow on the component
         */
        "displayDropShadow": boolean;
        /**
          * The optional padding to add to the bottom of the component wrapper
         */
        "outerPaddingBottom": SpacingTokens;
        /**
          * The optional padding to add to the left of the component wrapper
         */
        "outerPaddingLeft": SpacingTokens;
        /**
          * The optional padding to add to the right of the component wrapper
         */
        "outerPaddingRight": SpacingTokens;
        /**
          * The optional padding to add to the top of the component wrapper
         */
        "outerPaddingTop": SpacingTokens;
        /**
          * The optional padding to add to the bottom of the component body
         */
        "paddingBottom": SpacingTokens;
        /**
          * The optional padding to add to the left of the component body
         */
        "paddingLeft": SpacingTokens;
        /**
          * The optional padding to add to the right of the component body
         */
        "paddingRight": SpacingTokens;
        /**
          * The optional padding to add to the top of the component body
         */
        "paddingTop": SpacingTokens;
    }
    interface AesColumn {
        /**
          * The number of columns wide this column should be.
         */
        "colSpanDefault": colSpanRange;
        /**
          * The number of columns wide this column should be on large+ screens.
         */
        "colSpanLg": colSpanRange;
        /**
          * The number of columns wide this column should be on medium+ screens.
         */
        "colSpanMd": colSpanRange;
        /**
          * The number of columns wide this column should be on small+ screens.
         */
        "colSpanSm": colSpanRange;
        /**
          * The number of columns wide this column should be on extra large+ screens.
         */
        "colSpanXl": colSpanRange;
        /**
          * The number of columns wide this column should be on extra extra large+ screens.
         */
        "colSpanXxl": colSpanRange;
        /**
          * The vertical placement of content inside of the column.
         */
        "contentAlign": VerticalAlignment;
    }
    interface AesContainer {
        /**
          * Whether or not this is a nested container. If it's nested, remove padding.
         */
        "isNested": boolean;
    }
    interface AesCta {
        /**
          * Append a right arrow to the link text
         */
        "displayLinkArrow": boolean;
        /**
          * The link url and text
         */
        "link": CTALink;
    }
    interface AesCustomeLine {
    }
    interface AesDonut {
        /**
          * Only accepts the 4 signature colors
         */
        "color": SignaturePrimaryColor;
        /**
          * Percent of circumference color line fills
         */
        "percent": number;
        /**
          * Thickness of stroke
         */
        "strokeWidth": number;
    }
    interface AesDrawer {
    }
    interface AesDrawerItem {
        /**
          * Choose which predefined icon to add to the link
         */
        "icon": IconType;
    }
    interface AesGrid {
        /**
          * How much of a gap should exist between columns? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSize": Size;
        /**
          * How much of a gap should exist between columns on large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeLg": Size;
        /**
          * How much of a gap should exist between columns on medium+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeMd": Size;
        /**
          * How much of a gap should exist between columns on small+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeSm": Size;
        /**
          * How much of a gap should exist between columns on extra large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeXl": Size;
        /**
          * How much of a gap should exist between columns on extra extra large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeXxl": Size;
        /**
          * Whether or not this is a nested grid. If it's nested, remove padding from the container.
         */
        "isNested": boolean;
    }
    interface AesHeading {
        /**
          * The heading tag to apply: 1 | 2 | 3 | 4
         */
        "level": AllowedHeadingLevels;
        /**
          * The heading level style to apply. Optional override to default styles for a given level
         */
        "levelStyle": AllowedHeadingLevels;
        /**
          * The smaller, decorative subheading style
         */
        "sub": boolean;
    }
    interface AesHero {
        /**
          * Should the dark overlay sit over top of the bg image
         */
        "overlay": boolean;
    }
    interface AesHeroInteractive {
        /**
          * The background image for low-motion users
         */
        "bgImage": string;
        /**
          * A url to an mp4 video to play full size in the background
         */
        "bgVideo": string;
        /**
          * How often should the slide should change (in milliseconds)
         */
        "duration": number;
        /**
          * How to show progress: a progress bar or "pips"
         */
        "progress": 'bar' | 'pips';
    }
    interface AesHeroSlide {
        /**
          * Link and text for button
         */
        "cta": CTAProps | string;
        /**
          * Text that appears above the headline
         */
        "eyebrow": string;
        /**
          * The main headline
         */
        "headline": string;
    }
    interface AesI18nSelect {
        /**
          * Whether or not the select box is disabled.
         */
        "disabled": boolean;
        /**
          * The list of options that should be shown.
         */
        "options": string;
        /**
          * The url that the user is on.
         */
        "value": string;
    }
    interface AesIcon {
        /**
          * The icon type to display from ./assets. Takes precedence over url.
         */
        "icon": IconType;
        /**
          * The url to display a remote icon
         */
        "url": string;
    }
    interface AesImage {
        /**
          * Should this image be a parallax instance?
         */
        "parallax": boolean;
    }
    interface AesLanguageSelector {
        /**
          * for language selector titles and links
         */
        "LanguageSelector": { title: string; value: string; }[];
    }
    interface AesLine {
        /**
          * The time the animation lasts https://developer.mozilla.org/en-US/docs/Web/CSS/time
         */
        "animDuration": string;
        /**
          * Stores the IntersectionObserver instance
         */
        "animObserver": IntersectionObserver;
        /**
          * Portion of the element visible to trigger the animation
         */
        "animThreshold": number;
        /**
          * The direction for the line to exist.
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * Whether the line should be animated when
         */
        "displayAnimated": boolean;
    }
    interface AesLink {
        /**
          * The <a> href attribute
         */
        "href": string;
        /**
          * The <a> rel attribute
         */
        "rel": string;
        /**
          * The <a> target attribute
         */
        "target": LinkTarget;
    }
    interface AesLogo {
        /**
          * The logo type to display from ./assets.
         */
        "logo": LogoType;
        /**
          * The market associated with the logo.
         */
        "market": Markets;
        /**
          * The style of the logo to use.
         */
        "variant": LogoVariants;
    }
    interface AesMediaLink {
        /**
          * The icon to show next to the link.
         */
        "icon": IconType;
        /**
          * Whether to show the document icon
         */
        "shouldDisplayIcon": boolean;
        /**
          * The target to use for the link, used in conjunction with the url. Always open in a new tab because this should always link to a document.
         */
        "target": LinkTarget;
        /**
          * The url to use for the link. This will render an anchor element.
         */
        "url": string;
    }
    interface AesMediaLinkContainer {
        /**
          * Which brand color should be used as the background of this container?
         */
        "bgColor": NeutralColor;
    }
    interface AesMenuAccordion {
        /**
          * Whether to display the accordion in open or close state
         */
        "isOpen": boolean;
        /**
          * The variant of the accordion.
         */
        "variant": AccordionType;
    }
    interface AesMenuButton {
        /**
          * The name of the icon being used for the button.
         */
        "icon": IconType;
        /**
          * Whether to display a right arrow after the slot
         */
        "shouldDisplayArrow": boolean;
        /**
          * The url to use for a link. This will render an anchor element. Do not set this prop if you are using the clickAction prop.
         */
        "url": string;
    }
    interface AesMenuDropdown {
    }
    interface AesMenuDropdownContent {
    }
    interface AesMenuLink {
        /**
          * Whether or not the link is active.
         */
        "active": boolean;
        /**
          * The link target.
         */
        "target": LinkTarget;
        /**
          * The link URL.
         */
        "url": string;
    }
    interface AesNewsCta {
        /**
          * The type of news release. 'press' or 'external'
         */
        "newsType": 'press' | 'external';
    }
    interface AesParagraph {
    }
    interface AesProgress {
        /**
          * The value of "100%"
         */
        "max": number;
        /**
          * The actual progress of the bar
         */
        "value": number;
    }
    interface AesSection {
        /**
          * The background color (chosen from a given set of brand colors) of the section.
         */
        "verticalPadding": Size;
    }
    interface AesSiteFooter {
    }
    interface AesSiteHeader {
    }
    interface AesSlider {
        /**
          * Whether to automatically advance slides
         */
        "autoplay": boolean;
        /**
          * Whether to display navigation arrows to switch slides
         */
        "displayArrows": boolean;
        /**
          * Whether to display navigation dots to switch slides
         */
        "displayDots": boolean;
        /**
          * Delay between slides change (miliseconds, requires active autoplay)
         */
        "duration": number;
        /**
          * Whether the slider has been initialized
         */
        "initialized": boolean;
        /**
          * Whether to infinitely loop slides
         */
        "loop": boolean;
        /**
          * Number of slides to display (e.g. use 1.5 to display one and a half slides)
         */
        "slidesToDisplay": number;
        /**
          * Default no of slides visible on mobile view
         */
        "slidesToDisplayOnMobile": number;
        /**
          * Spacing between slides
         */
        "spacing": number;
    }
    interface AesSpacer {
        /**
          * Bottom spacing from Tailwind config
         */
        "b": SpacingTokens;
        /**
          * Left spacing from Tailwind config
         */
        "l": SpacingTokens;
        /**
          * Right spacing from Tailwind config
         */
        "r": SpacingTokens;
        /**
          * Top spacing from Tailwind config
         */
        "t": SpacingTokens;
    }
    interface AesSubMenu {
        /**
          * for sub menu titles and links
         */
        "subMenu": ({ url: string; title: string; external: boolean; colorvariation: string; } | { url: string; external: boolean; title?: undefined; colorvariation?: undefined; })[];
    }
    interface AesSubmenuTitle {
        /**
          * The icon to display next to the text.
         */
        "icon": IconType;
    }
    interface AesTextInput {
        /**
          * Whether or not this is a disabled field.
         */
        "disabled": boolean;
        /**
          * The name of the field.
         */
        "fieldName": string;
        /**
          * The type of text field.
         */
        "fieldType": TextInput;
        /**
          * Whether or not the label should be hidden.
         */
        "hideLabel": boolean;
        /**
          * Object of options for the input field. (Ex. { minlength: 5, maxlength: 10 })
         */
        "inputOptions": InputOptions;
        /**
          * The text for the label.
         */
        "labelText": string;
        /**
          * Whether or not this is a required field.
         */
        "required": boolean;
    }
}
declare global {
    interface HTMLAesAccordionElement extends Components.AesAccordion, HTMLStencilElement {
    }
    var HTMLAesAccordionElement: {
        prototype: HTMLAesAccordionElement;
        new (): HTMLAesAccordionElement;
    };
    interface HTMLAesBackToTopButtonElement extends Components.AesBackToTopButton, HTMLStencilElement {
    }
    var HTMLAesBackToTopButtonElement: {
        prototype: HTMLAesBackToTopButtonElement;
        new (): HTMLAesBackToTopButtonElement;
    };
    interface HTMLAesBgElement extends Components.AesBg, HTMLStencilElement {
    }
    var HTMLAesBgElement: {
        prototype: HTMLAesBgElement;
        new (): HTMLAesBgElement;
    };
    interface HTMLAesButtonElement extends Components.AesButton, HTMLStencilElement {
    }
    var HTMLAesButtonElement: {
        prototype: HTMLAesButtonElement;
        new (): HTMLAesButtonElement;
    };
    interface HTMLAesCanvasElement extends Components.AesCanvas, HTMLStencilElement {
    }
    var HTMLAesCanvasElement: {
        prototype: HTMLAesCanvasElement;
        new (): HTMLAesCanvasElement;
    };
    interface HTMLAesColumnElement extends Components.AesColumn, HTMLStencilElement {
    }
    var HTMLAesColumnElement: {
        prototype: HTMLAesColumnElement;
        new (): HTMLAesColumnElement;
    };
    interface HTMLAesContainerElement extends Components.AesContainer, HTMLStencilElement {
    }
    var HTMLAesContainerElement: {
        prototype: HTMLAesContainerElement;
        new (): HTMLAesContainerElement;
    };
    interface HTMLAesCtaElement extends Components.AesCta, HTMLStencilElement {
    }
    var HTMLAesCtaElement: {
        prototype: HTMLAesCtaElement;
        new (): HTMLAesCtaElement;
    };
    interface HTMLAesCustomeLineElement extends Components.AesCustomeLine, HTMLStencilElement {
    }
    var HTMLAesCustomeLineElement: {
        prototype: HTMLAesCustomeLineElement;
        new (): HTMLAesCustomeLineElement;
    };
    interface HTMLAesDonutElement extends Components.AesDonut, HTMLStencilElement {
    }
    var HTMLAesDonutElement: {
        prototype: HTMLAesDonutElement;
        new (): HTMLAesDonutElement;
    };
    interface HTMLAesDrawerElement extends Components.AesDrawer, HTMLStencilElement {
    }
    var HTMLAesDrawerElement: {
        prototype: HTMLAesDrawerElement;
        new (): HTMLAesDrawerElement;
    };
    interface HTMLAesDrawerItemElement extends Components.AesDrawerItem, HTMLStencilElement {
    }
    var HTMLAesDrawerItemElement: {
        prototype: HTMLAesDrawerItemElement;
        new (): HTMLAesDrawerItemElement;
    };
    interface HTMLAesGridElement extends Components.AesGrid, HTMLStencilElement {
    }
    var HTMLAesGridElement: {
        prototype: HTMLAesGridElement;
        new (): HTMLAesGridElement;
    };
    interface HTMLAesHeadingElement extends Components.AesHeading, HTMLStencilElement {
    }
    var HTMLAesHeadingElement: {
        prototype: HTMLAesHeadingElement;
        new (): HTMLAesHeadingElement;
    };
    interface HTMLAesHeroElement extends Components.AesHero, HTMLStencilElement {
    }
    var HTMLAesHeroElement: {
        prototype: HTMLAesHeroElement;
        new (): HTMLAesHeroElement;
    };
    interface HTMLAesHeroInteractiveElement extends Components.AesHeroInteractive, HTMLStencilElement {
    }
    var HTMLAesHeroInteractiveElement: {
        prototype: HTMLAesHeroInteractiveElement;
        new (): HTMLAesHeroInteractiveElement;
    };
    interface HTMLAesHeroSlideElement extends Components.AesHeroSlide, HTMLStencilElement {
    }
    var HTMLAesHeroSlideElement: {
        prototype: HTMLAesHeroSlideElement;
        new (): HTMLAesHeroSlideElement;
    };
    interface HTMLAesI18nSelectElement extends Components.AesI18nSelect, HTMLStencilElement {
    }
    var HTMLAesI18nSelectElement: {
        prototype: HTMLAesI18nSelectElement;
        new (): HTMLAesI18nSelectElement;
    };
    interface HTMLAesIconElement extends Components.AesIcon, HTMLStencilElement {
    }
    var HTMLAesIconElement: {
        prototype: HTMLAesIconElement;
        new (): HTMLAesIconElement;
    };
    interface HTMLAesImageElement extends Components.AesImage, HTMLStencilElement {
    }
    var HTMLAesImageElement: {
        prototype: HTMLAesImageElement;
        new (): HTMLAesImageElement;
    };
    interface HTMLAesLanguageSelectorElement extends Components.AesLanguageSelector, HTMLStencilElement {
    }
    var HTMLAesLanguageSelectorElement: {
        prototype: HTMLAesLanguageSelectorElement;
        new (): HTMLAesLanguageSelectorElement;
    };
    interface HTMLAesLineElement extends Components.AesLine, HTMLStencilElement {
    }
    var HTMLAesLineElement: {
        prototype: HTMLAesLineElement;
        new (): HTMLAesLineElement;
    };
    interface HTMLAesLinkElement extends Components.AesLink, HTMLStencilElement {
    }
    var HTMLAesLinkElement: {
        prototype: HTMLAesLinkElement;
        new (): HTMLAesLinkElement;
    };
    interface HTMLAesLogoElement extends Components.AesLogo, HTMLStencilElement {
    }
    var HTMLAesLogoElement: {
        prototype: HTMLAesLogoElement;
        new (): HTMLAesLogoElement;
    };
    interface HTMLAesMediaLinkElement extends Components.AesMediaLink, HTMLStencilElement {
    }
    var HTMLAesMediaLinkElement: {
        prototype: HTMLAesMediaLinkElement;
        new (): HTMLAesMediaLinkElement;
    };
    interface HTMLAesMediaLinkContainerElement extends Components.AesMediaLinkContainer, HTMLStencilElement {
    }
    var HTMLAesMediaLinkContainerElement: {
        prototype: HTMLAesMediaLinkContainerElement;
        new (): HTMLAesMediaLinkContainerElement;
    };
    interface HTMLAesMenuAccordionElement extends Components.AesMenuAccordion, HTMLStencilElement {
    }
    var HTMLAesMenuAccordionElement: {
        prototype: HTMLAesMenuAccordionElement;
        new (): HTMLAesMenuAccordionElement;
    };
    interface HTMLAesMenuButtonElement extends Components.AesMenuButton, HTMLStencilElement {
    }
    var HTMLAesMenuButtonElement: {
        prototype: HTMLAesMenuButtonElement;
        new (): HTMLAesMenuButtonElement;
    };
    interface HTMLAesMenuDropdownElement extends Components.AesMenuDropdown, HTMLStencilElement {
    }
    var HTMLAesMenuDropdownElement: {
        prototype: HTMLAesMenuDropdownElement;
        new (): HTMLAesMenuDropdownElement;
    };
    interface HTMLAesMenuDropdownContentElement extends Components.AesMenuDropdownContent, HTMLStencilElement {
    }
    var HTMLAesMenuDropdownContentElement: {
        prototype: HTMLAesMenuDropdownContentElement;
        new (): HTMLAesMenuDropdownContentElement;
    };
    interface HTMLAesMenuLinkElement extends Components.AesMenuLink, HTMLStencilElement {
    }
    var HTMLAesMenuLinkElement: {
        prototype: HTMLAesMenuLinkElement;
        new (): HTMLAesMenuLinkElement;
    };
    interface HTMLAesNewsCtaElement extends Components.AesNewsCta, HTMLStencilElement {
    }
    var HTMLAesNewsCtaElement: {
        prototype: HTMLAesNewsCtaElement;
        new (): HTMLAesNewsCtaElement;
    };
    interface HTMLAesParagraphElement extends Components.AesParagraph, HTMLStencilElement {
    }
    var HTMLAesParagraphElement: {
        prototype: HTMLAesParagraphElement;
        new (): HTMLAesParagraphElement;
    };
    interface HTMLAesProgressElement extends Components.AesProgress, HTMLStencilElement {
    }
    var HTMLAesProgressElement: {
        prototype: HTMLAesProgressElement;
        new (): HTMLAesProgressElement;
    };
    interface HTMLAesSectionElement extends Components.AesSection, HTMLStencilElement {
    }
    var HTMLAesSectionElement: {
        prototype: HTMLAesSectionElement;
        new (): HTMLAesSectionElement;
    };
    interface HTMLAesSiteFooterElement extends Components.AesSiteFooter, HTMLStencilElement {
    }
    var HTMLAesSiteFooterElement: {
        prototype: HTMLAesSiteFooterElement;
        new (): HTMLAesSiteFooterElement;
    };
    interface HTMLAesSiteHeaderElement extends Components.AesSiteHeader, HTMLStencilElement {
    }
    var HTMLAesSiteHeaderElement: {
        prototype: HTMLAesSiteHeaderElement;
        new (): HTMLAesSiteHeaderElement;
    };
    interface HTMLAesSliderElement extends Components.AesSlider, HTMLStencilElement {
    }
    var HTMLAesSliderElement: {
        prototype: HTMLAesSliderElement;
        new (): HTMLAesSliderElement;
    };
    interface HTMLAesSpacerElement extends Components.AesSpacer, HTMLStencilElement {
    }
    var HTMLAesSpacerElement: {
        prototype: HTMLAesSpacerElement;
        new (): HTMLAesSpacerElement;
    };
    interface HTMLAesSubMenuElement extends Components.AesSubMenu, HTMLStencilElement {
    }
    var HTMLAesSubMenuElement: {
        prototype: HTMLAesSubMenuElement;
        new (): HTMLAesSubMenuElement;
    };
    interface HTMLAesSubmenuTitleElement extends Components.AesSubmenuTitle, HTMLStencilElement {
    }
    var HTMLAesSubmenuTitleElement: {
        prototype: HTMLAesSubmenuTitleElement;
        new (): HTMLAesSubmenuTitleElement;
    };
    interface HTMLAesTextInputElement extends Components.AesTextInput, HTMLStencilElement {
    }
    var HTMLAesTextInputElement: {
        prototype: HTMLAesTextInputElement;
        new (): HTMLAesTextInputElement;
    };
    interface HTMLElementTagNameMap {
        "aes-accordion": HTMLAesAccordionElement;
        "aes-back-to-top-button": HTMLAesBackToTopButtonElement;
        "aes-bg": HTMLAesBgElement;
        "aes-button": HTMLAesButtonElement;
        "aes-canvas": HTMLAesCanvasElement;
        "aes-column": HTMLAesColumnElement;
        "aes-container": HTMLAesContainerElement;
        "aes-cta": HTMLAesCtaElement;
        "aes-custome-line": HTMLAesCustomeLineElement;
        "aes-donut": HTMLAesDonutElement;
        "aes-drawer": HTMLAesDrawerElement;
        "aes-drawer-item": HTMLAesDrawerItemElement;
        "aes-grid": HTMLAesGridElement;
        "aes-heading": HTMLAesHeadingElement;
        "aes-hero": HTMLAesHeroElement;
        "aes-hero-interactive": HTMLAesHeroInteractiveElement;
        "aes-hero-slide": HTMLAesHeroSlideElement;
        "aes-i18n-select": HTMLAesI18nSelectElement;
        "aes-icon": HTMLAesIconElement;
        "aes-image": HTMLAesImageElement;
        "aes-language-selector": HTMLAesLanguageSelectorElement;
        "aes-line": HTMLAesLineElement;
        "aes-link": HTMLAesLinkElement;
        "aes-logo": HTMLAesLogoElement;
        "aes-media-link": HTMLAesMediaLinkElement;
        "aes-media-link-container": HTMLAesMediaLinkContainerElement;
        "aes-menu-accordion": HTMLAesMenuAccordionElement;
        "aes-menu-button": HTMLAesMenuButtonElement;
        "aes-menu-dropdown": HTMLAesMenuDropdownElement;
        "aes-menu-dropdown-content": HTMLAesMenuDropdownContentElement;
        "aes-menu-link": HTMLAesMenuLinkElement;
        "aes-news-cta": HTMLAesNewsCtaElement;
        "aes-paragraph": HTMLAesParagraphElement;
        "aes-progress": HTMLAesProgressElement;
        "aes-section": HTMLAesSectionElement;
        "aes-site-footer": HTMLAesSiteFooterElement;
        "aes-site-header": HTMLAesSiteHeaderElement;
        "aes-slider": HTMLAesSliderElement;
        "aes-spacer": HTMLAesSpacerElement;
        "aes-sub-menu": HTMLAesSubMenuElement;
        "aes-submenu-title": HTMLAesSubmenuTitleElement;
        "aes-text-input": HTMLAesTextInputElement;
    }
}
declare namespace LocalJSX {
    interface AesAccordion {
        /**
          * Whether to display the accordion in open or close state
         */
        "isOpen"?: boolean;
    }
    interface AesBackToTopButton {
    }
    interface AesBg {
        /**
          * The neutral color to apply to the background
         */
        "color"?: NeutralColor;
        /**
          * The position of the image.
         */
        "imagePosition"?: 'top-right' | 'bottom';
        /**
          * The image to apply to the background
         */
        "imageUrl"?: string;
    }
    interface AesButton {
        /**
          * Whether the button is disabled. Only applies to implementations not using the url prop
         */
        "disabled"?: boolean;
        /**
          * Whether to display a right arrow after the slot
         */
        "shouldDisplayArrow"?: boolean;
        /**
          * The target to use for a link, used in conjunction with the url attribute.
         */
        "target"?: LinkTarget;
        /**
          * The url to use for a link. This will render an anchor element. Do not set this prop if you want to render a button element.
         */
        "url"?: string;
        /**
          * The button style variant to use.
         */
        "variant"?: ButtonVariant;
    }
    interface AesCanvas {
        /**
          * Whether to allow autoplay
         */
        "autoplay"?: boolean;
        /**
          * Which brand color should be used as the background of this section?
         */
        "bgColor"?: NeutralColor;
        /**
          * The image to apply to the background on hover
         */
        "bgHoverImage"?: string;
        /**
          * The vimeo video to show
         */
        "bgVimeoVideo"?: string;
        /**
          * Which brand color should be used as the border of this section?
         */
        "borderColor"?: Color;
        /**
          * Whether to show controls on video
         */
        "controls"?: boolean;
        /**
          * Options for rendering a CTA Link button at the bottom
         */
        "cta"?: CTAProps | string;
        /**
          * Whether to display a border around the component
         */
        "displayBorder"?: boolean;
        /**
          * Whether to display a drop shadow on the component
         */
        "displayDropShadow"?: boolean;
        /**
          * The optional padding to add to the bottom of the component wrapper
         */
        "outerPaddingBottom"?: SpacingTokens;
        /**
          * The optional padding to add to the left of the component wrapper
         */
        "outerPaddingLeft"?: SpacingTokens;
        /**
          * The optional padding to add to the right of the component wrapper
         */
        "outerPaddingRight"?: SpacingTokens;
        /**
          * The optional padding to add to the top of the component wrapper
         */
        "outerPaddingTop"?: SpacingTokens;
        /**
          * The optional padding to add to the bottom of the component body
         */
        "paddingBottom"?: SpacingTokens;
        /**
          * The optional padding to add to the left of the component body
         */
        "paddingLeft"?: SpacingTokens;
        /**
          * The optional padding to add to the right of the component body
         */
        "paddingRight"?: SpacingTokens;
        /**
          * The optional padding to add to the top of the component body
         */
        "paddingTop"?: SpacingTokens;
    }
    interface AesColumn {
        /**
          * The number of columns wide this column should be.
         */
        "colSpanDefault"?: colSpanRange;
        /**
          * The number of columns wide this column should be on large+ screens.
         */
        "colSpanLg"?: colSpanRange;
        /**
          * The number of columns wide this column should be on medium+ screens.
         */
        "colSpanMd"?: colSpanRange;
        /**
          * The number of columns wide this column should be on small+ screens.
         */
        "colSpanSm"?: colSpanRange;
        /**
          * The number of columns wide this column should be on extra large+ screens.
         */
        "colSpanXl"?: colSpanRange;
        /**
          * The number of columns wide this column should be on extra extra large+ screens.
         */
        "colSpanXxl"?: colSpanRange;
        /**
          * The vertical placement of content inside of the column.
         */
        "contentAlign"?: VerticalAlignment;
    }
    interface AesContainer {
        /**
          * Whether or not this is a nested container. If it's nested, remove padding.
         */
        "isNested"?: boolean;
    }
    interface AesCta {
        /**
          * Append a right arrow to the link text
         */
        "displayLinkArrow"?: boolean;
        /**
          * The link url and text
         */
        "link"?: CTALink;
    }
    interface AesCustomeLine {
    }
    interface AesDonut {
        /**
          * Only accepts the 4 signature colors
         */
        "color"?: SignaturePrimaryColor;
        /**
          * Percent of circumference color line fills
         */
        "percent"?: number;
        /**
          * Thickness of stroke
         */
        "strokeWidth"?: number;
    }
    interface AesDrawer {
    }
    interface AesDrawerItem {
        /**
          * Choose which predefined icon to add to the link
         */
        "icon"?: IconType;
    }
    interface AesGrid {
        /**
          * How much of a gap should exist between columns? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSize"?: Size;
        /**
          * How much of a gap should exist between columns on large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeLg"?: Size;
        /**
          * How much of a gap should exist between columns on medium+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeMd"?: Size;
        /**
          * How much of a gap should exist between columns on small+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeSm"?: Size;
        /**
          * How much of a gap should exist between columns on extra large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeXl"?: Size;
        /**
          * How much of a gap should exist between columns on extra extra large+ screens? (This affects both the vertical and horizontal column/row gaps.)
         */
        "gapSizeXxl"?: Size;
        /**
          * Whether or not this is a nested grid. If it's nested, remove padding from the container.
         */
        "isNested"?: boolean;
    }
    interface AesHeading {
        /**
          * The heading tag to apply: 1 | 2 | 3 | 4
         */
        "level"?: AllowedHeadingLevels;
        /**
          * The heading level style to apply. Optional override to default styles for a given level
         */
        "levelStyle"?: AllowedHeadingLevels;
        /**
          * The smaller, decorative subheading style
         */
        "sub"?: boolean;
    }
    interface AesHero {
        /**
          * Should the dark overlay sit over top of the bg image
         */
        "overlay"?: boolean;
    }
    interface AesHeroInteractive {
        /**
          * The background image for low-motion users
         */
        "bgImage"?: string;
        /**
          * A url to an mp4 video to play full size in the background
         */
        "bgVideo"?: string;
        /**
          * How often should the slide should change (in milliseconds)
         */
        "duration"?: number;
        /**
          * How to show progress: a progress bar or "pips"
         */
        "progress"?: 'bar' | 'pips';
    }
    interface AesHeroSlide {
        /**
          * Link and text for button
         */
        "cta"?: CTAProps | string;
        /**
          * Text that appears above the headline
         */
        "eyebrow"?: string;
        /**
          * The main headline
         */
        "headline"?: string;
    }
    interface AesI18nSelect {
        /**
          * Whether or not the select box is disabled.
         */
        "disabled"?: boolean;
        /**
          * The list of options that should be shown.
         */
        "options"?: string;
        /**
          * The url that the user is on.
         */
        "value"?: string;
    }
    interface AesIcon {
        /**
          * The icon type to display from ./assets. Takes precedence over url.
         */
        "icon"?: IconType;
        /**
          * The url to display a remote icon
         */
        "url"?: string;
    }
    interface AesImage {
        /**
          * Should this image be a parallax instance?
         */
        "parallax"?: boolean;
    }
    interface AesLanguageSelector {
        /**
          * for language selector titles and links
         */
        "LanguageSelector"?: { title: string; value: string; }[];
    }
    interface AesLine {
        /**
          * The time the animation lasts https://developer.mozilla.org/en-US/docs/Web/CSS/time
         */
        "animDuration"?: string;
        /**
          * Stores the IntersectionObserver instance
         */
        "animObserver"?: IntersectionObserver;
        /**
          * Portion of the element visible to trigger the animation
         */
        "animThreshold"?: number;
        /**
          * The direction for the line to exist.
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * Whether the line should be animated when
         */
        "displayAnimated"?: boolean;
    }
    interface AesLink {
        /**
          * The <a> href attribute
         */
        "href"?: string;
        /**
          * The <a> rel attribute
         */
        "rel"?: string;
        /**
          * The <a> target attribute
         */
        "target"?: LinkTarget;
    }
    interface AesLogo {
        /**
          * The logo type to display from ./assets.
         */
        "logo"?: LogoType;
        /**
          * The market associated with the logo.
         */
        "market"?: Markets;
        /**
          * The style of the logo to use.
         */
        "variant"?: LogoVariants;
    }
    interface AesMediaLink {
        /**
          * The icon to show next to the link.
         */
        "icon"?: IconType;
        /**
          * Whether to show the document icon
         */
        "shouldDisplayIcon"?: boolean;
        /**
          * The target to use for the link, used in conjunction with the url. Always open in a new tab because this should always link to a document.
         */
        "target"?: LinkTarget;
        /**
          * The url to use for the link. This will render an anchor element.
         */
        "url"?: string;
    }
    interface AesMediaLinkContainer {
        /**
          * Which brand color should be used as the background of this container?
         */
        "bgColor"?: NeutralColor;
    }
    interface AesMenuAccordion {
        /**
          * Whether to display the accordion in open or close state
         */
        "isOpen"?: boolean;
        /**
          * The variant of the accordion.
         */
        "variant"?: AccordionType;
    }
    interface AesMenuButton {
        /**
          * The name of the icon being used for the button.
         */
        "icon"?: IconType;
        /**
          * Whether to display a right arrow after the slot
         */
        "shouldDisplayArrow"?: boolean;
        /**
          * The url to use for a link. This will render an anchor element. Do not set this prop if you are using the clickAction prop.
         */
        "url"?: string;
    }
    interface AesMenuDropdown {
    }
    interface AesMenuDropdownContent {
    }
    interface AesMenuLink {
        /**
          * Whether or not the link is active.
         */
        "active"?: boolean;
        /**
          * The link target.
         */
        "target"?: LinkTarget;
        /**
          * The link URL.
         */
        "url"?: string;
    }
    interface AesNewsCta {
        /**
          * The type of news release. 'press' or 'external'
         */
        "newsType"?: 'press' | 'external';
    }
    interface AesParagraph {
    }
    interface AesProgress {
        /**
          * The value of "100%"
         */
        "max"?: number;
        /**
          * The actual progress of the bar
         */
        "value"?: number;
    }
    interface AesSection {
        /**
          * The background color (chosen from a given set of brand colors) of the section.
         */
        "verticalPadding"?: Size;
    }
    interface AesSiteFooter {
    }
    interface AesSiteHeader {
    }
    interface AesSlider {
        /**
          * Whether to automatically advance slides
         */
        "autoplay"?: boolean;
        /**
          * Whether to display navigation arrows to switch slides
         */
        "displayArrows"?: boolean;
        /**
          * Whether to display navigation dots to switch slides
         */
        "displayDots"?: boolean;
        /**
          * Delay between slides change (miliseconds, requires active autoplay)
         */
        "duration"?: number;
        /**
          * Whether the slider has been initialized
         */
        "initialized"?: boolean;
        /**
          * Whether to infinitely loop slides
         */
        "loop"?: boolean;
        /**
          * Number of slides to display (e.g. use 1.5 to display one and a half slides)
         */
        "slidesToDisplay"?: number;
        /**
          * Default no of slides visible on mobile view
         */
        "slidesToDisplayOnMobile"?: number;
        /**
          * Spacing between slides
         */
        "spacing"?: number;
    }
    interface AesSpacer {
        /**
          * Bottom spacing from Tailwind config
         */
        "b"?: SpacingTokens;
        /**
          * Left spacing from Tailwind config
         */
        "l"?: SpacingTokens;
        /**
          * Right spacing from Tailwind config
         */
        "r"?: SpacingTokens;
        /**
          * Top spacing from Tailwind config
         */
        "t"?: SpacingTokens;
    }
    interface AesSubMenu {
        /**
          * for sub menu titles and links
         */
        "subMenu"?: ({ url: string; title: string; external: boolean; colorvariation: string; } | { url: string; external: boolean; title?: undefined; colorvariation?: undefined; })[];
    }
    interface AesSubmenuTitle {
        /**
          * The icon to display next to the text.
         */
        "icon"?: IconType;
    }
    interface AesTextInput {
        /**
          * Whether or not this is a disabled field.
         */
        "disabled"?: boolean;
        /**
          * The name of the field.
         */
        "fieldName"?: string;
        /**
          * The type of text field.
         */
        "fieldType"?: TextInput;
        /**
          * Whether or not the label should be hidden.
         */
        "hideLabel"?: boolean;
        /**
          * Object of options for the input field. (Ex. { minlength: 5, maxlength: 10 })
         */
        "inputOptions"?: InputOptions;
        /**
          * The text for the label.
         */
        "labelText"?: string;
        /**
          * Whether or not this is a required field.
         */
        "required"?: boolean;
    }
    interface IntrinsicElements {
        "aes-accordion": AesAccordion;
        "aes-back-to-top-button": AesBackToTopButton;
        "aes-bg": AesBg;
        "aes-button": AesButton;
        "aes-canvas": AesCanvas;
        "aes-column": AesColumn;
        "aes-container": AesContainer;
        "aes-cta": AesCta;
        "aes-custome-line": AesCustomeLine;
        "aes-donut": AesDonut;
        "aes-drawer": AesDrawer;
        "aes-drawer-item": AesDrawerItem;
        "aes-grid": AesGrid;
        "aes-heading": AesHeading;
        "aes-hero": AesHero;
        "aes-hero-interactive": AesHeroInteractive;
        "aes-hero-slide": AesHeroSlide;
        "aes-i18n-select": AesI18nSelect;
        "aes-icon": AesIcon;
        "aes-image": AesImage;
        "aes-language-selector": AesLanguageSelector;
        "aes-line": AesLine;
        "aes-link": AesLink;
        "aes-logo": AesLogo;
        "aes-media-link": AesMediaLink;
        "aes-media-link-container": AesMediaLinkContainer;
        "aes-menu-accordion": AesMenuAccordion;
        "aes-menu-button": AesMenuButton;
        "aes-menu-dropdown": AesMenuDropdown;
        "aes-menu-dropdown-content": AesMenuDropdownContent;
        "aes-menu-link": AesMenuLink;
        "aes-news-cta": AesNewsCta;
        "aes-paragraph": AesParagraph;
        "aes-progress": AesProgress;
        "aes-section": AesSection;
        "aes-site-footer": AesSiteFooter;
        "aes-site-header": AesSiteHeader;
        "aes-slider": AesSlider;
        "aes-spacer": AesSpacer;
        "aes-sub-menu": AesSubMenu;
        "aes-submenu-title": AesSubmenuTitle;
        "aes-text-input": AesTextInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "aes-accordion": LocalJSX.AesAccordion & JSXBase.HTMLAttributes<HTMLAesAccordionElement>;
            "aes-back-to-top-button": LocalJSX.AesBackToTopButton & JSXBase.HTMLAttributes<HTMLAesBackToTopButtonElement>;
            "aes-bg": LocalJSX.AesBg & JSXBase.HTMLAttributes<HTMLAesBgElement>;
            "aes-button": LocalJSX.AesButton & JSXBase.HTMLAttributes<HTMLAesButtonElement>;
            "aes-canvas": LocalJSX.AesCanvas & JSXBase.HTMLAttributes<HTMLAesCanvasElement>;
            "aes-column": LocalJSX.AesColumn & JSXBase.HTMLAttributes<HTMLAesColumnElement>;
            "aes-container": LocalJSX.AesContainer & JSXBase.HTMLAttributes<HTMLAesContainerElement>;
            "aes-cta": LocalJSX.AesCta & JSXBase.HTMLAttributes<HTMLAesCtaElement>;
            "aes-custome-line": LocalJSX.AesCustomeLine & JSXBase.HTMLAttributes<HTMLAesCustomeLineElement>;
            "aes-donut": LocalJSX.AesDonut & JSXBase.HTMLAttributes<HTMLAesDonutElement>;
            "aes-drawer": LocalJSX.AesDrawer & JSXBase.HTMLAttributes<HTMLAesDrawerElement>;
            "aes-drawer-item": LocalJSX.AesDrawerItem & JSXBase.HTMLAttributes<HTMLAesDrawerItemElement>;
            "aes-grid": LocalJSX.AesGrid & JSXBase.HTMLAttributes<HTMLAesGridElement>;
            "aes-heading": LocalJSX.AesHeading & JSXBase.HTMLAttributes<HTMLAesHeadingElement>;
            "aes-hero": LocalJSX.AesHero & JSXBase.HTMLAttributes<HTMLAesHeroElement>;
            "aes-hero-interactive": LocalJSX.AesHeroInteractive & JSXBase.HTMLAttributes<HTMLAesHeroInteractiveElement>;
            "aes-hero-slide": LocalJSX.AesHeroSlide & JSXBase.HTMLAttributes<HTMLAesHeroSlideElement>;
            "aes-i18n-select": LocalJSX.AesI18nSelect & JSXBase.HTMLAttributes<HTMLAesI18nSelectElement>;
            "aes-icon": LocalJSX.AesIcon & JSXBase.HTMLAttributes<HTMLAesIconElement>;
            "aes-image": LocalJSX.AesImage & JSXBase.HTMLAttributes<HTMLAesImageElement>;
            "aes-language-selector": LocalJSX.AesLanguageSelector & JSXBase.HTMLAttributes<HTMLAesLanguageSelectorElement>;
            "aes-line": LocalJSX.AesLine & JSXBase.HTMLAttributes<HTMLAesLineElement>;
            "aes-link": LocalJSX.AesLink & JSXBase.HTMLAttributes<HTMLAesLinkElement>;
            "aes-logo": LocalJSX.AesLogo & JSXBase.HTMLAttributes<HTMLAesLogoElement>;
            "aes-media-link": LocalJSX.AesMediaLink & JSXBase.HTMLAttributes<HTMLAesMediaLinkElement>;
            "aes-media-link-container": LocalJSX.AesMediaLinkContainer & JSXBase.HTMLAttributes<HTMLAesMediaLinkContainerElement>;
            "aes-menu-accordion": LocalJSX.AesMenuAccordion & JSXBase.HTMLAttributes<HTMLAesMenuAccordionElement>;
            "aes-menu-button": LocalJSX.AesMenuButton & JSXBase.HTMLAttributes<HTMLAesMenuButtonElement>;
            "aes-menu-dropdown": LocalJSX.AesMenuDropdown & JSXBase.HTMLAttributes<HTMLAesMenuDropdownElement>;
            "aes-menu-dropdown-content": LocalJSX.AesMenuDropdownContent & JSXBase.HTMLAttributes<HTMLAesMenuDropdownContentElement>;
            "aes-menu-link": LocalJSX.AesMenuLink & JSXBase.HTMLAttributes<HTMLAesMenuLinkElement>;
            "aes-news-cta": LocalJSX.AesNewsCta & JSXBase.HTMLAttributes<HTMLAesNewsCtaElement>;
            "aes-paragraph": LocalJSX.AesParagraph & JSXBase.HTMLAttributes<HTMLAesParagraphElement>;
            "aes-progress": LocalJSX.AesProgress & JSXBase.HTMLAttributes<HTMLAesProgressElement>;
            "aes-section": LocalJSX.AesSection & JSXBase.HTMLAttributes<HTMLAesSectionElement>;
            "aes-site-footer": LocalJSX.AesSiteFooter & JSXBase.HTMLAttributes<HTMLAesSiteFooterElement>;
            "aes-site-header": LocalJSX.AesSiteHeader & JSXBase.HTMLAttributes<HTMLAesSiteHeaderElement>;
            "aes-slider": LocalJSX.AesSlider & JSXBase.HTMLAttributes<HTMLAesSliderElement>;
            "aes-spacer": LocalJSX.AesSpacer & JSXBase.HTMLAttributes<HTMLAesSpacerElement>;
            "aes-sub-menu": LocalJSX.AesSubMenu & JSXBase.HTMLAttributes<HTMLAesSubMenuElement>;
            "aes-submenu-title": LocalJSX.AesSubmenuTitle & JSXBase.HTMLAttributes<HTMLAesSubmenuTitleElement>;
            "aes-text-input": LocalJSX.AesTextInput & JSXBase.HTMLAttributes<HTMLAesTextInputElement>;
        }
    }
}
