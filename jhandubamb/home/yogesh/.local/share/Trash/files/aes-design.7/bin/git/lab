#!/usr/bin/env bash
## Wrapper around the 'lab' GitLab CLI.
## See https://github.com/zaquestion/lab
## Uses the phase2/lab docker container

source "$(dirname $0)/../.helper"

set -e

# Convert relative path between two paths.
# From https://stackoverflow.com/questions/2564634/convert-absolute-path-into-relative-path-given-a-current-directory-using-bash
rel_path() {
  # both $1 and $2 are absolute paths beginning with /
  # returns relative path to $2/$target from $1/$source
  source=$1
  target=$2

  commonPart=$source # for now
  result=""          # for now

  while [[ "${target#$commonPart}" == "${target}" ]]; do
    # no match, means that candidate common part is not correct
    # go up one level (reduce common part)
    commonPart="$(dirname $commonPart)"
    # and record that we went back, with correct / handling
    if [[ -z $result ]]; then
      result=".."
    else
      result="../$result"
    fi
  done

  if [[ $commonPart == "/" ]]; then
    # special case for root (no common path)
    result="$result/"
  fi

  # since we now have identified the common part,
  # compute the non-common part
  forwardPart="${target#$commonPart}"

  # and now stick all parts together
  if [[ -n $result ]] && [[ -n $forwardPart ]]; then
    result="$result$forwardPart"
  elif [[ -n $forwardPart ]]; then
    # extra slash removal
    result="${forwardPart:1}"
  fi

  echo $result
}

# Determine relative path within container between project root and current
# git root (might be in a submodule).
workdir="/home/git/"$(rel_path $PROJECT_ROOT $(git_root))

# Ensure gcloud and lab config folder exists.
mkdir -p ${HOME}/.config
lab="docker run -it --rm -v ${HOME}/.config:/root/.config -v ${PROJECT_ROOT}:/home/git -w ${workdir} outrigger/lab"

# Init command can be used by other scripts to ensure access is set up first.
# Doing access testing here allows calling scripts to fail more gracefully.
if [ "$1" == "init" ]; then
  if [ ! -e ~/.config/lab.hcl ]; then
    # Setup Gitlab access token if this is the first time using.
    # Need the || statement to prevent failing from aborting script.
    $lab version || true
  fi

  # See if the access actually works.
  labVersion=$($lab version || true)
  if [[ "$labVersion" == *"Unauthorized"* ]]; then
    echo "GitLab access not granted, verify the correct personal token was entered."
    # Remove bad GitLab token file that was created.
    rm -f ~/.config/lab.hcl
    exit 1
  fi

else
  $lab "$@"
fi
